Tutorial
========

Sample configuration file
-------------------------

All examples in this tutorial will use the ini-style configuration
file shown below.

.. literalinclude:: tutorial-config.ini
   :language: cfg


Backwards compatibility
-----------------------

The classes of the `validatingconfigparser` module are backwards
compatible to the classes that can be found in
the `ConfigParser` module of the Python Standard Library. 

.. literalinclude:: tutorial-compatible.py
   :language: python

The program above will produce the following output.

::

  Peter Angus
  male
  30
  True
  80.5
  None
  31
  Traceback (most recent call last):
  ...
  ConfigParser.NoOptionError: No option 'height' in section: 'peter'


Adding validation
-----------------

Adding validators can ensure that values are valid. At the same time validators
also convert the type of a value. Only the `get()` method supports the
`validator` keyword argument. This is no limitation since the validator will
convert the value as required and the `getfloat()`, `getint()` and
`getboolean()` methods are no longer required.

The API of `validatingconfigparser` is designed so that the validators of the 
`Formencode` project can be used "out of the box".

.. literalinclude:: tutorial-validators.py
   :language: python

The output is similar to the earlier example but setting Peter's 
age to a negative number will raise a `formencode.api.Invalid`
exception.

::

  Peter Angus
  male
  30
  True
  80.5
  [('name', 'Peter Angus'), ('gender', 'male'), ('age', 30), 
   ('married', True), ('weight', 80.5)]
  Traceback (most recent call last):
  ...
  formencode.api.Invalid: Please enter a number that is 0 or greater


The convenience of schemas
--------------------------

Adding a validator to every `get()` call will become tedious very quickly. A much
more elegant approach is to define a schema that describes how values will be
validated. A schema is simply a collection of validators. 

The `items()` method also uses the schema and all values will be validated.

A schema will automatically apply to all options across all sections of the
configuration file. Even with a schema it is still possible to use the
`validator` argument of the `get()` method. In this case the validator
given as the keyword argument will be used instead of the validator of the
schema.

If a schema does not contain a validator for an option then no validation
will be performed.

.. literalinclude:: tutorial-schema.py
   :language: python

The output would be exactly the same as the previous example.


Writing your own validator
--------------------------

The `Formencode` package provides a large number of different validators 
but sometimes it may be necessary to write a custom validator. For this 
one can either sub-class `formencode.api.FancyValidator` or write one from 
scratch. 

Sub-classing `FancyValidator` is best described in the official `Formencode`
documentation but a simple example would look like this.

.. literalinclude:: tutorial-fancyvalidator.py
   :language: python

::

  2
  Traceback (most recent call last):
  ...
  formencode.api.Invalid: 1 not an even number

Writing a validator from scratch is equally simple but instead of providing
`_to_python()` and `_from_python()` methods (note the leading underscore) one
has to implement `to_python()` and `from_python()` directly.

.. literalinclude:: tutorial-ownvalidator.py
   :language: python

::

  2
  ValueError: 1 not an even number
